{"version":3,"sources":["components/LaunchItem.js","components/MissionKey.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","classNames","text-success","text-danger","dist_default","format","react_router_dom","to","concat","MissionKey","LAUNCHES_QUERY","gql","_templateObject","Launches","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","react","react_apollo_esm","query","loading","error","data","console","log","launches","map","Component","LAUNCHE_QUERY","Launch_templateObject","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","httpLink","HttpLink","uri","authLink","setContext","_","headers","token","localStorage","getItem","objectSpread","Authorization","client","ApolloClient","link","cache","InMemoryCache","App","src","alt","style","width","display","margin","react_router","exact","path","component","Launch","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oSAKe,SAASA,EAATC,GAAgG,IAAAC,EAAAD,EAA3EE,OAASC,EAAkEF,EAAlEE,cAAeC,EAAmDH,EAAnDG,aAAcC,EAAqCJ,EAArCI,kBAAmBC,EAAkBL,EAAlBK,eAEzF,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,qBAAa,IACTF,EAAAC,EAAAC,cAAA,QAAMC,UAAWC,IAAW,CACxBC,eAAgBN,EAChBO,eAAgBP,KACfF,IACTG,EAAAC,EAAAC,cAAA,yBAAgBF,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAQO,OAAO,oBAAoBV,KAEvDE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,GAAE,WAAAC,OAAaf,GAAiBO,UAAU,qBAAhD,qBCjBL,SAASS,IACpB,OACIZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBADpB,cAGAH,EAAAC,EAAAC,cAAA,SACIF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,wBADpB,mQCDZ,IAAMU,EAAiBC,IAAHC,KA4CLC,EAjCf,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WAEQ,OACI5B,EAAAC,EAAAC,cAAC2B,EAAA,SAAD,KACI7B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,YAGAH,EAAAC,EAAAC,cAACU,EAAD,MACAZ,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,MAAOlB,GAEN,SAAApB,GAA6B,IAA1BuC,EAA0BvC,EAA1BuC,QAASC,EAAiBxC,EAAjBwC,MAAOC,EAAUzC,EAAVyC,KACf,OAAGF,EACQhC,EAAAC,EAAAC,cAAA,yBAER+B,GACCE,QAAQC,IAAIH,GAEhBE,QAAQC,IAAIF,EAAKG,UACVrC,EAAAC,EAAAC,cAAC2B,EAAA,SAAD,KAECK,EAAKG,SAASC,IAAI,SAAA3C,GAAM,OACpBK,EAAAC,EAAAC,cAACV,EAAD,CAAYmC,IAAKhC,EAAOC,cAAeD,OAAQA,eArBvFqB,EAAA,CAA8BuB,qfCX9B,IAAMC,EAAgB1B,IAAH2B,KAgFJzB,EA/Df,SAAAC,GAAA,SAAAD,IAAA,OAAAE,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,GAAAE,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,MAAAH,KAAAI,YAAA,OAAAN,OAAAO,EAAA,EAAAP,CAAAF,EAAAC,GAAAC,OAAAQ,EAAA,EAAAR,CAAAF,EAAA,EAAAW,IAAA,SAAAC,MAAA,WACa,IACChC,EAAkBwB,KAAKsB,MAAMC,MAAMC,OAAnChD,cAGN,OADAA,EAAgBiD,SAASjD,GAErBI,EAAAC,EAAAC,cAAC2B,EAAA,SAAD,KACI7B,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAd,YAGAH,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,MAAOS,EAAeM,UAAW,CAAClD,kBAEjC,SAAAH,GAA6B,IAA1BuC,EAA0BvC,EAA1BuC,QAASC,EAAiBxC,EAAjBwC,MAAOC,EAAUzC,EAAVyC,KACf,GAAGF,EACC,OAAOhC,EAAAC,EAAAC,cAAA,wBAER+B,GACCE,QAAQC,IAAIH,GALS,IAAAc,EAiBpBb,EAAKvC,OARNE,EATqBkD,EASrBlD,aACAD,EAVqBmD,EAUrBnD,cACAoD,EAXqBD,EAWrBC,YACAjD,EAZqBgD,EAYrBhD,eAZqBkD,EAAAF,EAarBG,OACAC,EAdqBF,EAcrBE,UACAC,EAfqBH,EAerBG,YACAC,EAhBqBJ,EAgBrBI,YAGJ,OAAOrD,EAAAC,EAAAC,cAAA,WACHF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAAiBH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,aAAhB,YAA/B,IAA4EN,GAC5EG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,kBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACVH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,kBACoBP,GAEpBI,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,gBACkB6C,GAElBhD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,mBACsBJ,EAAkB,eAAO,iBAGnDC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAd,kBACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cACNH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,cAA4CgD,GAC5CnD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,kBAAgDiD,GAChDpD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAd,gBAA8CkD,IAEtDrD,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACO,EAAA,EAAD,CAAMC,GAAG,IAAIP,UAAU,qBAAvB,gBApDhCa,EAAA,CAA8BuB,aCdxBe,EAAW,IAAIC,IAAS,CAC5BC,IAAK,kCAIDC,EAAWC,YAAW,SAACC,EAADlE,GAAoB,IAAdmE,EAAcnE,EAAdmE,QAE1BC,EAAQC,aAAaC,QAAQ,SAEnC,MAAO,CACLH,QAAQ1C,OAAA8C,EAAA,EAAA9C,CAAA,GACH0C,EADE,CAELK,cAAeJ,EAAK,UAAAlD,OAAakD,GAAU,QAK3CK,EAAS,IAAIC,IAAa,CAC9BC,KAAMX,EAAS9C,OAAO2C,GACtBe,MAAO,IAAIC,MAuBEC,MAnBf,WACE,OACEvE,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAgBoC,OAAQA,GACtBlE,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACET,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKsE,IAAI,kEAAkEC,IAAI,SAASC,MAAO,CAAEC,MAAM,IAAKC,QAAS,QAASC,OAAQ,UAEtI7E,EAAAC,EAAAC,cAAC4E,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjE,IACjChB,EAAAC,EAAAC,cAAC4E,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,yBAAyBC,UAAWC,SC9B9CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS3C,MACvB,2DCbN4C,IAASC,OAAOxF,EAAAC,EAAAC,cAACuF,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.debda34b.chunk.js","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport Moment from 'react-moment';\nimport { Link } from 'react-router-dom';\n\nexport default function LaunchItem({launch: {flight_number, mission_name, launch_date_local, launch_success}}) {\n\n    return (\n        <div className=\"card card-body mb-3\">\n            <div className=\"row\">\n                <div className=\"col-md-9\">\n                    <h4>Mission:{' '} \n                        <span className={classNames({\n                            'text-success': launch_success,\n                            'text-danger': !launch_success\n                        })}>{mission_name}</span></h4>\n                    <p>Launch date: <Moment format=\"YYYY-MM-DD HH:mm\">{launch_date_local}</Moment></p>\n                </div>\n                <div className=\"col-md-3\">\n                    <Link to={`/launch/${flight_number}`} className=\"btn btn-secondary\">Launch Details</Link>\n                </div>\n            </div>\n        </div>\n    )\n}","import React from 'react'\n\nexport default function MissionKey() {\n    return (\n        <div className=\"my-3\">\n            <p>\n                <span className=\"px-3 mr-2 bg-success\"/> = Success\n            </p>\n            <p>\n                <span className=\"px-3 mr-2 bg-danger\"/> = Fail\n            </p>\n        </div>\n    )\n}","import React, { Component, Fragment } from 'react'\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport LaunchItem from './LaunchItem';\nimport MissionKey from './MissionKey'\n\n\nconst LAUNCHES_QUERY = gql`\n    query LaunchesQuery{\n        launches {\n            flight_number\n            launch_date_local\n            launch_success\n            mission_name\n        }\n    }\n`;\n\nexport class Launches extends Component {\n    render() {\n        return (\n            <Fragment>\n                <h1 className=\"display-4 my-3\">\n                    Launches\n                </h1>\n                <MissionKey/>\n                <Query query={LAUNCHES_QUERY}>\n                    {\n                        ({ loading, error, data}) => {\n                            if(loading){\n                                return <h4>Loading...</h4>;\n                            }\n                            if(error){\n                                console.log(error)\n                            }\n                            console.log(data.launches)\n                            return <Fragment>\n                                {\n                                    data.launches.map(launch => (\n                                        <LaunchItem key={launch.flight_number} launch={launch}/>\n                                    ))\n                                }\n                            </Fragment>;\n                        }\n                    }\n                </Query>\n            </Fragment>\n        )\n    }\n}\n\nexport default Launches","import React, { Component, Fragment } from 'react'\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Link } from 'react-router-dom';\nimport classNames from 'classnames';\n\n\nconst LAUNCHE_QUERY = gql`\n    query LaunchQuery($flight_number: Int!){\n        launch(flight_number: $flight_number) {\n            flight_number,\n            launch_year,\n            mission_name,\n            launch_date_local,\n            launch_success,\n            rocket {\n                rocket_id\n                rocket_name\n                rocket_type\n            }\n        }\n    }\n`;\n\nexport class Launches extends Component {\n    render() {\n        let { flight_number } = this.props.match.params\n\n        flight_number = parseInt(flight_number);\n        return (\n            <Fragment>\n                <h1 className=\"display-4 my-3\">\n                    Launches\n                </h1>\n                <Query query={LAUNCHE_QUERY} variables={{flight_number}}>\n                    {\n                        ({ loading, error, data}) => {\n                            if(loading){\n                                return <h4>Loading...</h4>;\n                            }\n                            if(error){\n                                console.log(error)\n                            }\n\n                            const {\n                                mission_name, \n                                flight_number, \n                                launch_year, \n                                launch_success, \n                                rocket: {\n                                rocket_id,\n                                rocket_name,\n                                rocket_type\n                            }} = data.launch;\n\n                            return <div>\n                                <h1 className=\"display-4 my-3\"><span className=\"text-dark\">Mission:</span> {mission_name}</h1>\n                                <h4 className=\"mb-3\">Launch Details</h4>\n                                <ul className=\"list-group\">\n                                    <li className=\"list-group-item\">\n                                        Flight number: {flight_number}\n                                    </li>\n                                    <li className=\"list-group-item\">\n                                        Launch year: {launch_year}\n                                    </li>\n                                    <li className=\"list-group-item\">\n                                        Launch Success: {(launch_success) ? '👍' : '👎'}\n                                    </li>\n                                </ul>\n                                <h4 className=\"my-3\">Rocket Details</h4>\n                                <ul className=\"list-group\">\n                                        <li className=\"list-group-item\">Rocket ID: {rocket_id}</li>\n                                        <li className=\"list-group-item\">Rocket Nomber: {rocket_name}</li>\n                                        <li className=\"list-group-item\">Rocket Type: {rocket_type}</li>\n                                </ul>\n                                <hr/>\n                                <Link to=\"/\" className=\"btn btn-secondary\">Back</Link>\n                            </div>;\n\n                        }\n                    }\n                </Query>\n            </Fragment>\n        )\n    }\n}\n\nexport default Launches","import React from 'react';\nimport Launches from './components/Launches'\nimport { ApolloProvider } from 'react-apollo';\nimport ApolloClient from 'apollo-client';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\nimport { HttpLink, createHttpLink } from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport Launch from './components/Launch';\n\nconst httpLink = new HttpLink({\n  uri: 'http://localhost:4000/graphql',\n})\n\n\nconst authLink = setContext((_, { headers }) => {\n\n  const token = localStorage.getItem('token');\n\n  return {\n    headers: {\n      ...headers,\n      Authorization: token ? `Bearer ${token}` : \"\"\n    }\n  }\n})\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache()\n  \n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div className=\"container\">\n          <div className=\"App\">\n            <img src='https://www.spacex.com/sites/spacex/files/spacex_logo_white.png' alt=\"SpaceX\" style={{ width:300, display: 'block', margin: \"auto\"}} />\n\n            <Route exact path=\"/\" component={Launches}/>\n            <Route exact path=\"/launch/:flight_number\" component={Launch}/>\n\n          </div>\n        </div>\n      </Router>\n    </ApolloProvider>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}